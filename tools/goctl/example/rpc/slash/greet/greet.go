// Code generated by goctl. DO NOT EDIT.
// Source: slash.proto

package greet

import (
	"context"

	"github.com/zeromicro/go-zero/tools/goctl/example/rpc/slash/pb/slash"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	HelloReq    = slash.HelloReq
	HelloResp   = slash.HelloResp
	HiReq       = slash.HiReq
	HiResp      = slash.HiResp
	SayHaloReq  = slash.SayHaloReq
	SayHaloResp = slash.SayHaloResp

	Greet interface {
		// group: foo
		SayHello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error)
		// group: bar
		SayHi(ctx context.Context, in *HiReq, opts ...grpc.CallOption) (*HiResp, error)
		SayHalo(ctx context.Context, in *SayHaloReq, opts ...grpc.CallOption) (*SayHaloResp, error)
	}

	defaultGreet struct {
		cli zrpc.Client
	}
)

func NewGreet(cli zrpc.Client) Greet {
	return &defaultGreet{
		cli: cli,
	}
}

// group: foo
func (m *defaultGreet) SayHello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error) {
	client := slash.NewGreetClient(m.cli.Conn())
	return client.SayHello(ctx, in, opts...)
}

// group: bar
func (m *defaultGreet) SayHi(ctx context.Context, in *HiReq, opts ...grpc.CallOption) (*HiResp, error) {
	client := slash.NewGreetClient(m.cli.Conn())
	return client.SayHi(ctx, in, opts...)
}

func (m *defaultGreet) SayHalo(ctx context.Context, in *SayHaloReq, opts ...grpc.CallOption) (*SayHaloResp, error) {
	client := slash.NewGreetClient(m.cli.Conn())
	return client.SayHalo(ctx, in, opts...)
}
