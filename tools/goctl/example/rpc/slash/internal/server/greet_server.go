// Code generated by goctl. DO NOT EDIT.
// Source: slash.proto

package server

import (
	"context"

	"github.com/zeromicro/go-zero/tools/goctl/example/rpc/slash/internal/logic"
	"github.com/zeromicro/go-zero/tools/goctl/example/rpc/slash/internal/logic/bar"
	"github.com/zeromicro/go-zero/tools/goctl/example/rpc/slash/internal/logic/foo"
	"github.com/zeromicro/go-zero/tools/goctl/example/rpc/slash/internal/svc"
	"github.com/zeromicro/go-zero/tools/goctl/example/rpc/slash/pb/slash"
)

type GreetServer struct {
	svcCtx *svc.ServiceContext
	slash.UnimplementedGreetServer
}

func NewGreetServer(svcCtx *svc.ServiceContext) *GreetServer {
	return &GreetServer{
		svcCtx: svcCtx,
	}
}

// group: foo
func (s *GreetServer) SayHello(ctx context.Context, in *slash.HelloReq) (*slash.HelloResp, error) {
	l := foologic.NewSayHelloLogic(ctx, s.svcCtx)
	return l.SayHello(in)
}

// group: bar
func (s *GreetServer) SayHi(ctx context.Context, in *slash.HiReq) (*slash.HiResp, error) {
	l := barlogic.NewSayHiLogic(ctx, s.svcCtx)
	return l.SayHi(in)
}

func (s *GreetServer) SayHalo(ctx context.Context, in *slash.SayHaloReq) (*slash.SayHaloResp, error) {
	l := logic.NewSayHaloLogic(ctx, s.svcCtx)
	return l.SayHalo(in)
}
